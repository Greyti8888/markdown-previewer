{"version":3,"sources":["components/Toolbar.js","components/Dragbar.js","components/Editor.js","components/Previewer.js","App.js","index.js"],"names":["Toolbar","state","expand","addEffect","button","replacementText","e","props","editor","current","start","selectionStart","end","selectionEnd","selectedText","value","slice","effect","currentTarget","id","focus","toolSet","setRangeText","length","setSelectionRange","replace","updateInput","expandToolbar","setState","ToolbarSC","mainColor","this","ButtonSC","title","onClick","icon","faBold","faItalic","faQuoteLeft","faLink","faImage","ExpandButtonSC","faChevronLeft","faChevronRight","HiddenButtonSC","faListUl","faListOl","React","Component","Bold","Italic","CrossedOut","Quote","Code","MultiLineCode","UnorderedListItem","OrderedListItem","Link","Image","styled","div","DragBar","DragBarSC","dragBarWidth","Editor","forwardRef","ref","TextAreaSC","text","onChange","handleInput","textarea","Previewer","PreviewerSC","dangerouslySetInnerHTML","__html","marked","setOptions","breaks","renderer","Renderer","App","input","editorPlaceholder","resize","createRef","containerPadding","toggleResize","target","handleResize","style","width","pageX","document","body","margin","ContainerSC","turnOffSelection","onMouseDown","onMouseUp","onMouseMove","EditorPreviewerSC","handleDragState","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.b3de0dbb.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faBold, faItalic, faQuoteLeft, faLink, faImage, faChevronLeft, faChevronRight, faListUl, faListOl} from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\nexport default class Toolbar extends React.Component {\r\n  \r\n    state = {\r\n      expand: false\r\n    }\r\n    \r\n    addEffect = (button) => {\r\n      let e = this.props.editor.current\r\n      let start = e.selectionStart\r\n      let end = e.selectionEnd\r\n      let selectedText = e.value.slice(start, end)\r\n      let effect = button.currentTarget.id\r\n      let replacementText;\r\n      \r\n      if (!selectedText) {\r\n        selectedText = effect\r\n      }\r\n  \r\n      let selectionStart = '';\r\n      let selectionEnd = '';\r\n      e.focus(); \r\n      switch (effect) {\r\n        case 'Quote':\r\n        case 'UnorderedListItem':\r\n        case 'OrderedListItem':\r\n          replacementText = toolSet[effect] + selectedText;\r\n          e.setRangeText(replacementText, start, end);\r\n          selectionStart = start + toolSet[effect].length\r\n          selectionEnd = selectionStart + selectedText.length\r\n          e.setSelectionRange(selectionStart, selectionEnd)\r\n          break;\r\n        case 'MultiLineCode':\r\n          replacementText = toolSet[effect] + '\\n' + selectedText + '\\n' + toolSet[effect];\r\n          e.setRangeText(replacementText, start, end);\r\n          selectionStart = start + toolSet[effect].length\r\n          selectionEnd = selectionStart + selectedText.length + 1\r\n          e.setSelectionRange(selectionStart, selectionEnd)\r\n          break;\r\n        case 'Link':\r\n          replacementText = toolSet[effect].replace('Link', selectedText)\r\n          e.setRangeText(replacementText, start, end);\r\n          selectionStart = start + 1\r\n          selectionEnd = selectionStart + selectedText.length\r\n          e.setSelectionRange(selectionStart, selectionEnd)\r\n          break;\r\n        case 'Image':\r\n          replacementText = toolSet[effect].replace('Alt text', selectedText)\r\n          e.setRangeText(replacementText, start, end);\r\n          selectionStart = start + 5 + selectedText.length\r\n          selectionEnd = selectionStart + 8\r\n          e.setSelectionRange(selectionStart, selectionEnd)\r\n          break;\r\n        default:\r\n          replacementText = toolSet[effect] + selectedText + toolSet[effect];\r\n          e.setRangeText(replacementText, start, end);  \r\n          if(start === end) {\r\n            selectionStart = start + toolSet[effect].length\r\n            selectionEnd = selectionStart + selectedText.length\r\n            e.setSelectionRange(selectionStart, selectionEnd)\r\n          }\r\n      }\r\n      this.props.updateInput()\r\n    }\r\n    \r\n    expandToolbar = () => {\r\n      this.setState({\r\n        expand: !this.state.expand\r\n      })\r\n    }\r\n     \r\n    render() {\r\n      \r\n      return (\r\n        <ToolbarSC\r\n          mainColor={this.props.mainColor}\r\n          >\r\n          <ButtonSC\r\n            id='Bold'\r\n            title='Bold'\r\n            onClick={this.addEffect}\r\n          >\r\n            <FontAwesomeIcon icon={faBold} />\r\n          </ButtonSC>\r\n          <ButtonSC\r\n            id='Italic'\r\n            title='Italic'\r\n            onClick={this.addEffect}\r\n          >\r\n            <FontAwesomeIcon icon={faItalic} />\r\n          </ButtonSC>\r\n          <ButtonSC\r\n            id='Quote'\r\n            title='Quote'\r\n            onClick={this.addEffect}\r\n          >\r\n            <FontAwesomeIcon icon={faQuoteLeft} />\r\n          </ButtonSC>\r\n          <ButtonSC\r\n            id='Link'\r\n            title='Link'\r\n            onClick={this.addEffect}\r\n          >\r\n            <FontAwesomeIcon icon={faLink} />\r\n          </ButtonSC>\r\n          <ButtonSC\r\n            id='Image'\r\n            title='Image'\r\n            onClick={this.addEffect}\r\n          >\r\n            <FontAwesomeIcon icon={faImage} />\r\n          </ButtonSC>\r\n          <ExpandButtonSC\r\n            id='Expand'\r\n            title='More options'\r\n            mainColor={this.props.mainColor}\r\n            onClick={this.expandToolbar}\r\n          >\r\n            <FontAwesomeIcon icon={this.state.expand ? faChevronLeft : faChevronRight} />\r\n          </ExpandButtonSC>\r\n          <HiddenButtonSC\r\n            id='CrossedOut'\r\n            title='Crossed out'\r\n            onClick={this.addEffect}\r\n            expand={this.state.expand}\r\n          ><s>Text</s></HiddenButtonSC>\r\n          <HiddenButtonSC\r\n            id='Code'\r\n            title='Code'\r\n            onClick={this.addEffect}\r\n            expand={this.state.expand}\r\n          >>&lt;/&gt;</HiddenButtonSC>\r\n          <HiddenButtonSC\r\n            id='MultiLineCode'\r\n            title='Multi-line code'\r\n            onClick={this.addEffect}\r\n            expand={this.state.expand}\r\n          >&lt;/Multi-line&gt;</HiddenButtonSC>\r\n          <HiddenButtonSC\r\n            id='UnorderedListItem'\r\n            title='Unordered List Item'\r\n            onClick={this.addEffect}\r\n            expand={this.state.expand}\r\n          >\r\n            <FontAwesomeIcon icon={faListUl} />\r\n          </HiddenButtonSC>\r\n          <HiddenButtonSC\r\n            id='OrderedListItem'\r\n            title='Ordered List Item'\r\n            onClick={this.addEffect}\r\n            expand={this.state.expand}\r\n          >\r\n            <FontAwesomeIcon icon={faListOl} />\r\n          </HiddenButtonSC>\r\n        </ToolbarSC>\r\n      )\r\n    }\r\n  }\r\n  \r\n  const toolSet = {\r\n    Bold: '**',\r\n    Italic: '_',\r\n    CrossedOut: '~~',\r\n    Quote: '> ',\r\n    Code: '`',\r\n    MultiLineCode: '```',\r\n    UnorderedListItem: '- ',\r\n    OrderedListItem: '1. ',\r\n    Link: '[Link] (https://)',\r\n    Image: '![Alt text] (https://)'\r\n  }\r\n  \r\n  const ToolbarSC = styled.div`\r\n    display: flex;\r\n    box-sizing: border-box;\r\n    overflow: auto; \r\n    width: 100%;\r\n    margin-bottom: 8px;\r\n    padding: 0;\r\n    background-color: ${props => props.mainColor};\r\n  `\r\n\r\n  const ButtonSC = styled.button`\r\n    box-sizing: border-box;\r\n    user-select: none;\r\n    flex: none;\r\n    min-width: 30px;\r\n    height: 30px;\r\n    color: dimgrey;\r\n    white-space: nowrap;\r\n    margin: 1px;\r\n    border: 0.5px solid lightgrey;\r\n    border-radius: 5px;\r\n    background-color: white;\r\n  `\r\n  \r\n  const ExpandButtonSC = styled(ButtonSC)`\r\n    background-color: ${props => props.mainColor};\r\n  `\r\n  \r\n  const HiddenButtonSC = styled(ButtonSC)` \r\n    ${props => props.expand ? '' :\r\n  `width: 0;\r\n  min-width: 0;\r\n  padding: 0;\r\n  border: none;\r\n  overflow: hidden;`\r\n    }\r\n  `","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nexport default function DragBar(props) {\r\n  return (\r\n  <DragBarSC\r\n    id=\"dragbar\"\r\n    mainColor={props.mainColor}\r\n    dragBarWidth={props.dragBarWidth}\r\n  />\r\n  )\r\n} \r\n\r\nconst DragBarSC = styled.div`\r\n  cursor: col-resize;\r\n  min-width: ${props => props.dragBarWidth}px;\r\n  background-color: ${props => props.mainColor};\r\n`","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Editor = React.forwardRef((props, ref) => (\r\n  <TextAreaSC \r\n    id=\"editor\" \r\n    value={props.text} \r\n    onChange={props.handleInput}\r\n    ref={ref}\r\n    /> \r\n));\r\n\r\n\r\nconst TextAreaSC = styled.textarea`\r\n  box-sizing: border-box;\r\n  width: 50%;\r\n  margin: 0;\r\n  resize: none;\r\n  border: solid 0.5px lightgrey;\r\n  border-radius: 5px;\r\n`\r\nexport default Editor","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport marked from 'marked'\r\n\r\nmarked.setOptions({\r\n  breaks: true,\r\n  renderer: new marked.Renderer(),\r\n})\r\n\r\nexport default function Previewer (props) {\r\n  return (\r\n    <PreviewerSC\r\n      id='preview'\r\n      dangerouslySetInnerHTML={{ __html: marked(props.text) }}\r\n    />\r\n  )\r\n}\r\n\r\nconst PreviewerSC = styled.div`\r\n  box-sizing: border-box;\r\n  min-height: 100vh;\r\n  min-width: 0;\r\n  width: 50%;\r\n  flex: 1 0 0;\r\n  padding: 10px;\r\n  border: solid 0.5px lightgrey;\r\n  border-radius: 5px;\r\n  background-color: white;\r\n  code {\r\n    color: green;\r\n    font-weight: bold;\r\n    background-color: #eee;\r\n  }\r\n  pre {\r\n    background-color: #eee;\r\n  }\r\n  blockquote {\r\n    padding-left: 5px;\r\n    border-left: solid 3px;\r\n  }\r\n  table  {\r\n    border-collapse: collapse;\r\n  }\r\n  td, th {\r\n    padding: 5px;\r\n    border: 1px solid;\r\n  }\r\n`","import React from 'react'\nimport styled from 'styled-components'\n\nimport Toolbar from './components/Toolbar'\nimport DragBar from './components/Dragbar'\nimport Editor from './components/Editor'\nimport Previewer from './components/Previewer'\n\nexport default class App extends React.Component {\n  \n  state = {\n    // eslint-disable-next-line\n    input: editorPlaceholder,\n    resize: false\n  }\n\n  componentDidMount() {\n    document.body.style.margin = 0\n  }\n\n  editor = React.createRef()\n  containerPadding = 25\n  mainColor = '#f1f1f1'\n  dragBarWidth = 8\n  \n  handleInput = () => { \n    this.setState({ \n      input: this.editor.current.value,\n    })\n  }\n\n  toggleResize = (e) => {\n    if (e.target.id === 'dragbar') {\n      this.setState({\n        resize: true\n      })\n    } \n    if (this.state.resize) {\n      this.setState({ \n        resize: false\n      })\n    }\n  }\n  \n  handleResize = (e) => {\n      this.editor.current.style.width = (e.pageX - this.dragBarWidth / 2 - this.containerPadding) + 'px'\n  }\n  \n  render() {\n    return (\n      <ContainerSC\n        containerPadding={this.containerPadding}\n        mainColor={this.mainColor}\n        turnOffSelection={this.state.resize}\n        onMouseDown={this.toggleResize}\n        onMouseUp={this.toggleResize}\n        onMouseMove={this.state.resize ? this.handleResize : null}\n      >\n        <Toolbar\n          mainColor={this.mainColor}\n          editor={this.editor}\n          updateInput={this.handleInput}\n        />\n        <EditorPreviewerSC\n          mainColor={this.mainColor}\n          >\n          <Editor\n            text={this.state.input}\n            handleInput={this.handleInput}\n            ref={this.editor}\n          />\n          <DragBar\n            mainColor={this.mainColor}\n            dragBarWidth={this.dragBarWidth}\n            handleDragState={this.handleDragState}\n            />\n          <Previewer\n            text={this.state.input}\n            />\n        </EditorPreviewerSC>\n      </ContainerSC>\n    )\n  }\n}\n\nconst ContainerSC = styled.div`\n  user-select: ${props => props.turnOffSelection ? 'none' : ''};\n  padding: ${props => props.containerPadding}px;\n  background-color: ${props => props.mainColor};\n`\n\nconst EditorPreviewerSC = styled.div`\n  display: flex;\n  overflow: hidden;\n  background-color: ${props => props.mainColor};\n`\n\nconst editorPlaceholder = \n`# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n  \nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nSome cool line\n\n---\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | ------------- \nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want! \n1. But the list goes on...\n- Even if you use dashes or asterisks.\n* And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n`","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}